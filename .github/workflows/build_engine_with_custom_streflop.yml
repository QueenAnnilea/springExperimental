# .github/workflows/build_engine_with_internal_streflop_override.yml
# Workflow to build the BAR engine ('spring'), attempting to force
# its internal streflop build into software float mode for ARM64 macOS.
# v16: Deletes glad_glx.c source file instead of using CMake flag. Keeps patches.

name: Build BAR Engine (Delete GLAD GLX & Internal Streflop Override ARM64)

# Allow manual triggering from the GitHub Actions UI
on: workflow_dispatch

jobs:
  build:
    name: Build engine with internal streflop override (arm64)
    # Use the latest standard macOS runner
    runs-on: macos-latest

    steps:
      - name: Checkout engine code
        uses: actions/checkout@v4
        # Ensure submodules are checked out recursively
        with:
          submodules: 'recursive'

      - name: Install Dependencies (Homebrew)
        run: |
          brew update
          # Install core deps + audio
          brew install sdl2 devil minizip libogg libvorbis fontconfig
        shell: bash

      - name: Patch Root CMakeLists.txt to prevent STREFLOP_SSE
        run: |
          ROOT_CMAKE="CMakeLists.txt"
          echo "--- Content BEFORE patch: $ROOT_CMAKE ---"
          cat "$ROOT_CMAKE"
          echo "--- Applying patch (commenting out add_definitions(-DSTREFLOP_SSE)) ---"
          # Comment out the line that adds the problematic SSE definition
          sed -i.bak 's/^.*add_definitions(-DSTREFLOP_SSE)/#&/' "$ROOT_CMAKE"
          if [ $? -ne 0 ]; then
            echo "Root CMake sed command failed!"
            exit 1
          fi
          echo "--- Content AFTER patch: $ROOT_CMAKE ---"
          cat "$ROOT_CMAKE"
          echo "--- End root patch debug ---"
        shell: bash

      - name: Patch Legacy Build CMakeLists.txt to disable X11
        run: |
          TARGET_FILE="rts/builds/legacy/CMakeLists.txt"
          echo "--- Content BEFORE patch: $TARGET_FILE ---"
          cat "$TARGET_FILE"
          echo "--- Applying patch (commenting out X11 lines) ---"
          # Comment out the lines causing X11 errors
          sed -i.bak 's/^.*find_package(X11 REQUIRED)/#&/' "$TARGET_FILE" && \
          sed -i.bak 's/^.*target_link_libraries(Game PRIVATE X11::Xcursor)/#&/' "$TARGET_FILE" && \
          sed -i.bak 's/^.*list(APPEND engineLibraries ${X11_Xcursor_LIB} ${X11_X11_LIB})/#&/' "$TARGET_FILE"
          if [ $? -ne 0 ]; then
            echo "Legacy CMake sed command failed!"
            exit 1
          fi
          echo "--- Content AFTER patch: $TARGET_FILE ---"
          cat "$TARGET_FILE"
          echo "--- End legacy patch debug ---"
        shell: bash

      - name: Delete GLAD GLX source file # <-- NEW STEP
        run: |
          GLAD_GLX_FILE="rts/lib/glad/glad_glx.c"
          if [ -f "$GLAD_GLX_FILE" ]; then
            echo "Deleting $GLAD_GLX_FILE..."
            rm "$GLAD_GLX_FILE"
            echo "Deleted."
          else
            echo "$GLAD_GLX_FILE not found, skipping delete."
          fi
        shell: bash

      - name: List files in workspace (DEBUG)
        run: ls -la ${{ github.workspace }}
        shell: bash

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake for Engine
        # Attempt to enable streflop soft mode globally via CMAKE flags
        run: |
          cmake -S ${{ github.workspace }} -B ./build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DENABLE_STREFLOP=ON \ # Keep streflop enabled
            # Pass ONLY the SOFT flag for streflop (SSE flag should be prevented by patch)
            -DCMAKE_C_FLAGS="-DSTREFLOP_SOFT" \
            -DCMAKE_CXX_FLAGS="-DSTREFLOP_SOFT"
            # Add any other necessary CMake options for the engine build
        env:
           # Help CMake find Homebrew packages
           CMAKE_PREFIX_PATH: /opt/homebrew/opt/sdl2:/opt/homebrew/opt/devil:/opt/homebrew/opt/minizip:/opt/homebrew/opt/libogg:/opt/homebrew/opt/libvorbis:/opt/homebrew/opt/fontconfig
        shell: bash

      - name: Build BAR Engine
        # Build using the specified build directory
        run: |
          cmake --build ./build --config Release -- -j$(sysctl -n hw.ncpu)
        shell: bash

      # No artifact upload needed here unless we want to save the built engine
      # The success/failure of the build step determines the workflow outcome
