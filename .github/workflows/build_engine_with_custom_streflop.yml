# .github/workflows/build_engine_with_internal_streflop_override.yml
# Workflow to build the BAR engine ('spring'), attempting to force
# its internal streflop build into software float mode for ARM64 macOS.
# v26: Improved sed pattern for patching gflags minimum version.

name: Build BAR Engine (Improved gflags Patch & Toolchain Override ARM64)

# Allow manual triggering from the GitHub Actions UI
on: workflow_dispatch

jobs:
  build:
    name: Build engine with internal streflop override (arm64)
    # Use the latest standard macOS runner
    runs-on: macos-latest

    steps:
      - name: Checkout engine code
        uses: actions/checkout@v4
        # Ensure submodules are checked out recursively
        with:
          submodules: 'recursive'

      - name: Install Dependencies (Homebrew)
        run: |
          brew update
          # Install core deps + audio
          brew install sdl2 devil minizip libogg libvorbis fontconfig cmake # Ensure cmake is available
        shell: bash

      - name: Patch CMake Files
        run: |
          # --- Patch Root CMakeLists.txt ---
          ROOT_CMAKE="CMakeLists.txt"
          echo "--- Applying patch to $ROOT_CMAKE (commenting out add_definitions(-DSTREFLOP_SSE) AND removing OLD policies) ---"
          sed -i.bak 's|^.*add_definitions(-DSTREFLOP_SSE)|#&|' "$ROOT_CMAKE" && \
          sed -i.bak '/cmake_policy(SET CMP0060 OLD)/d' "$ROOT_CMAKE" && \
          sed -i.bak '/cmake_policy(SET CMP0065 OLD)/d' "$ROOT_CMAKE"
          if [ $? -ne 0 ]; then echo "Root CMake patch failed!"; exit 1; fi
          echo "--- Patched $ROOT_CMAKE ---"

          # --- Patch Legacy Build CMakeLists.txt ---
          LEGACY_CMAKE="rts/builds/legacy/CMakeLists.txt"
          echo "--- Applying patch to $LEGACY_CMAKE (commenting out X11 lines) ---"
          sed -i.bak 's|^.*find_package(X11 REQUIRED)|#&|' "$LEGACY_CMAKE" && \
          sed -i.bak 's|^.*target_link_libraries(Game PRIVATE X11::Xcursor)|#&|' "$LEGACY_CMAKE" && \
          sed -i.bak 's|^.*list(APPEND engineLibraries ${X11_Xcursor_LIB} ${X11_X11_LIB})|#&|' "$LEGACY_CMAKE"
          if [ $? -ne 0 ]; then echo "Legacy CMake patch failed!"; exit 1; fi
          echo "--- Patched $LEGACY_CMAKE ---"

          # --- Patch GLAD CMakeLists.txt ---
          GLAD_CMAKE="rts/lib/glad/CMakeLists.txt"
          if [ -f "$GLAD_CMAKE" ]; then
            echo "--- Applying patch to $GLAD_CMAKE (changing UNIX condition AND minimum version) ---"
            sed -i.bak 's/if *\( *UNIX AND NOT MINGW *\)/if (UNIX AND NOT APPLE AND NOT MINGW)/' "$GLAD_CMAKE" && \
            sed -i.bak 's/cmake_minimum_required( *VERSION *3\.0 *)/cmake_minimum_required(VERSION 3.5)/' "$GLAD_CMAKE"
            if [ $? -ne 0 ]; then echo "GLAD CMake patch failed!"; exit 1; fi
            echo "--- Patched $GLAD_CMAKE ---"
          else
            echo "WARNING: $GLAD_CMAKE not found, skipping GLAD patch."
          fi

          # --- Patch gflags CMakeLists.txt --- # <-- IMPROVED GFLAGS PATCH
          GFLAGS_CMAKE="rts/lib/gflags/CMakeLists.txt"
          if [ -f "$GFLAGS_CMAKE" ]; then
            echo "--- Applying patch to $GFLAGS_CMAKE (updating minimum version - improved sed) ---"
            # Improved pattern: matches 'cmake_minimum_required', captures 'VERSION', replaces version number, keeps potential extra args like FATAL_ERROR
            sed -i.bak 's/\(cmake_minimum_required *([[:space:]]*VERSION[[:space:]]*\)[0-9]\+\.[0-9]\+\(\.[0-9]\+\)*\(.*\))/\13.5\3/' "$GFLAGS_CMAKE"
            if [ $? -ne 0 ]; then echo "gflags CMake patch failed!"; exit 1; fi
            echo "--- Patched $GFLAGS_CMAKE ---"
            echo "--- Content AFTER patch: $GFLAGS_CMAKE ---" # Add debug output
            cat "$GFLAGS_CMAKE"
            echo "--- End gflags patch debug ---"
          else
            echo "WARNING: $GFLAGS_CMAKE not found, skipping gflags patch."
          fi
        shell: bash

      - name: List files in workspace (DEBUG)
        run: ls -la ${{ github.workspace }}
        shell: bash

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake for Engine using Toolchain File
        # Use the toolchain file instead of command-line flags for platform/compiler settings
        run: |
          cmake -S ${{ github.workspace }} -B ./build \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/.github/cmake/macos_arm64_softfloat.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_STREFLOP=ON
            # Add any other necessary project-specific CMake options here
        # No env needed for CMAKE_PREFIX_PATH as it's set in the toolchain file
        shell: bash

      - name: Build BAR Engine
        # Build using the specified build directory
        run: |
          cmake --build ./build --config Release
        shell: bash

      # No artifact upload needed here unless we want to save the built engine
      # The success/failure of the build step determines the workflow outcome
