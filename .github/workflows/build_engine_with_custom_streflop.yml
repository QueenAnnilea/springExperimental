# .github/workflows/build_engine_with_internal_streflop_override.yml
# Workflow to build the BAR engine ('spring'), attempting to force
# its internal streflop build into software float mode for ARM64 macOS.
# v9: Added libogg and libvorbis dependencies via Homebrew.

name: Build BAR Engine (Install Audio Deps & Internal Streflop Override ARM64)

# Allow manual triggering from the GitHub Actions UI
on: workflow_dispatch

jobs:
  build:
    name: Build engine with internal streflop override (arm64)
    # Use the latest standard macOS runner
    runs-on: macos-latest

    steps:
      - name: Checkout engine code
        uses: actions/checkout@v4
        # Ensure submodules are checked out recursively
        with:
          submodules: 'recursive'

      - name: Install Dependencies (Homebrew)
        run: |
          brew update
          # Install SDL2, DevIL, MiniZip, Ogg, Vorbis
          brew install sdl2 devil minizip libogg libvorbis
        shell: bash

      - name: List files in workspace (DEBUG)
        run: ls -la ${{ github.workspace }}
        shell: bash

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake for Engine
        # Attempt to enable streflop soft mode globally via CMAKE flags
        run: |
          cmake -S ${{ github.workspace }} -B ./build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DENABLE_STREFLOP=ON \ # Keep streflop enabled
            # Pass ONLY the SOFT flag
            -DCMAKE_C_FLAGS="-DSTREFLOP_SOFT" \
            -DCMAKE_CXX_FLAGS="-DSTREFLOP_SOFT"
            # Add any other necessary CMake options for the engine build
        env:
           # Help CMake find Homebrew packages
           CMAKE_PREFIX_PATH: /opt/homebrew/opt/sdl2:/opt/homebrew/opt/devil:/opt/homebrew/opt/minizip:/opt/homebrew/opt/libogg:/opt/homebrew/opt/libvorbis # Added Ogg/Vorbis paths
        shell: bash

      - name: Build BAR Engine
        # Build using the specified build directory
        run: |
          cmake --build ./build --config Release -- -j$(sysctl -n hw.ncpu)
        shell: bash

      # No artifact upload needed here unless we want to save the built engine
      # The success/failure of the build step determines the workflow outcome
