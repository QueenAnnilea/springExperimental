# .github/workflows/build_engine_with_internal_streflop_override.yml
# Workflow to build the BAR engine ('spring'), attempting to force
# its internal streflop build into software float mode for ARM64 macOS.
# v17: Patches multiple CMakeLists.txt files (root, legacy, glad)

name: Build BAR Engine (Multi-Patch & Internal Streflop Override ARM64)

# Allow manual triggering from the GitHub Actions UI
on: workflow_dispatch

jobs:
  build:
    name: Build engine with internal streflop override (arm64)
    # Use the latest standard macOS runner
    runs-on: macos-latest

    steps:
      - name: Checkout engine code
        uses: actions/checkout@v4
        # Ensure submodules are checked out recursively
        with:
          submodules: 'recursive'

      - name: Install Dependencies (Homebrew)
        run: |
          brew update
          # Install core deps + audio
          brew install sdl2 devil minizip libogg libvorbis fontconfig
        shell: bash

      - name: Patch CMake Files # <-- COMBINED PATCH STEP
        run: |
          # --- Patch Root CMakeLists.txt ---
          ROOT_CMAKE="CMakeLists.txt"
          echo "--- Content BEFORE patch: $ROOT_CMAKE ---"
          cat "$ROOT_CMAKE"
          echo "--- Applying patch (commenting out add_definitions(-DSTREFLOP_SSE)) ---"
          sed -i.bak 's|^.*add_definitions(-DSTREFLOP_SSE)|#&|' "$ROOT_CMAKE"
          if [ $? -ne 0 ]; then echo "Root CMake patch failed!"; exit 1; fi
          echo "--- Content AFTER patch: $ROOT_CMAKE ---"
          cat "$ROOT_CMAKE"
          echo "--- End root patch debug ---"

          # --- Patch Legacy Build CMakeLists.txt ---
          LEGACY_CMAKE="rts/builds/legacy/CMakeLists.txt"
          echo "--- Content BEFORE patch: $LEGACY_CMAKE ---"
          cat "$LEGACY_CMAKE"
          echo "--- Applying patch (commenting out X11 lines) ---"
          sed -i.bak 's|^.*find_package(X11 REQUIRED)|#&|' "$LEGACY_CMAKE" && \
          sed -i.bak 's|^.*target_link_libraries(Game PRIVATE X11::Xcursor)|#&|' "$LEGACY_CMAKE" && \
          sed -i.bak 's|^.*list(APPEND engineLibraries ${X11_Xcursor_LIB} ${X11_X11_LIB})|#&|' "$LEGACY_CMAKE"
          if [ $? -ne 0 ]; then echo "Legacy CMake patch failed!"; exit 1; fi
          echo "--- Content AFTER patch: $LEGACY_CMAKE ---"
          cat "$LEGACY_CMAKE"
          echo "--- End legacy patch debug ---"

          # --- Patch GLAD CMakeLists.txt (Best Guess) ---
          GLAD_CMAKE="rts/lib/glad/CMakeLists.txt"
          # Check if file exists before attempting patch
          if [ -f "$GLAD_CMAKE" ]; then
            echo "--- Content BEFORE patch: $GLAD_CMAKE ---"
            cat "$GLAD_CMAKE"
            echo "--- Applying patch (commenting out glad_glx.c source line - GUESSING!) ---"
            # This sed command GUESSES that glad_glx.c is listed alone or first on a line.
            # It might need adjustment based on the actual file content.
            sed -i.bak 's|^.*glad_glx.c.*|#&|' "$GLAD_CMAKE"
            if [ $? -ne 0 ]; then echo "GLAD CMake patch failed!"; exit 1; fi
            echo "--- Content AFTER patch: $GLAD_CMAKE ---"
            cat "$GLAD_CMAKE"
            echo "--- End GLAD patch debug ---"
          else
            echo "WARNING: $GLAD_CMAKE not found, skipping GLAD patch."
          fi
        shell: bash

      - name: List files in workspace (DEBUG)
        run: ls -la ${{ github.workspace }}
        shell: bash

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake for Engine
        # Attempt to enable streflop soft mode globally via CMAKE flags
        run: |
          cmake -S ${{ github.workspace }} -B ./build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DENABLE_STREFLOP=ON \ # Keep streflop enabled
            # Pass ONLY the SOFT flag for streflop (SSE flag should be prevented by patch)
            -DCMAKE_C_FLAGS="-DSTREFLOP_SOFT" \
            -DCMAKE_CXX_FLAGS="-DSTREFLOP_SOFT"
            # Add any other necessary CMake options for the engine build
        env:
           # Help CMake find Homebrew packages
           CMAKE_PREFIX_PATH: /opt/homebrew/opt/sdl2:/opt/homebrew/opt/devil:/opt/homebrew/opt/minizip:/opt/homebrew/opt/libogg:/opt/homebrew/opt/libvorbis:/opt/homebrew/opt/fontconfig
        shell: bash

      - name: Build BAR Engine
        # Build using the specified build directory
        run: |
          cmake --build ./build --config Release -- -j$(sysctl -n hw.ncpu)
        shell: bash

      # No artifact upload needed here unless we want to save the built engine
      # The success/failure of the build step determines the workflow outcome
